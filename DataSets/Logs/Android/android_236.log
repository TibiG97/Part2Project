12-17 19:33:11.223  2852  2852 I BadgedIconHelper: isCloneProcess = false
12-17 19:33:11.223  2852  2852 I StatusBarIconView: updateTint: tint=0
12-17 19:33:11.223   606  2379 E libteec : send data return = 192
12-17 19:33:11.223   835  2385 E libteec : receive data len = 192
12-17 19:33:11.223   835  2385 E libteec : begin
12-17 19:33:11.223   835  2385 E libteec : qsc_decode end
12-17 19:33:11.223   835  2385 I fpc_tac : fpc_tac_send_set_arbitrary_data_cmd:ok, response:0
12-17 19:33:11.223   835  2385 D fingerprintd: onAcquired(2001)
12-17 19:33:11.223  2852  2852 I BadgedIconHelper: isCloneProcess = false
12-17 19:33:11.223  1795 17831 W FingerprintService: onAcquired 1
12-17 19:33:11.224  1795  2326 W FingerprintService: onAcquired 2
12-17 19:33:11.224   835  2385 E libteec : begin
12-17 19:33:11.224  1795  2377 I IO.IOStatsService: onReceive:screen off
12-17 19:33:11.224  2852  2852 D HwCust  : Create obj success use class android.app.HwCustNotificationImpl
12-17 19:33:11.224   606  2379 E libteec : receive data len = 128
12-17 19:33:11.224  1795  6985 W ActivityManager: Sending non-protected broadcast com.android.systemui.statusbar.visible.change from system 2852:com.android.systemui/u0a33 pkg com.android.systemui
12-17 19:33:11.225  1795  6985 I ActivityManager_broadcast: collectReceiverComponents, callerApp: ProcessRecord{506ad58 2852:com.android.systemui/u0a33}, intent:com.android.systemui.statusbar.visible.change, receiver size:1, flags: 10000400
12-17 19:33:11.225  1795  6985 I HwActivityManagerService: Split enqueueing broadcast [callerApp]:ProcessRecord{506ad58 2852:com.android.systemui/u0a33}
12-17 19:33:11.225  1795  6985 I ActivityManager_broadcast: Enqueueing ordered broadcast[background] BroadcastRecord{6c7cdff u-1 com.android.systemui.statusbar.visible.change}: prev had 0
12-17 19:33:11.226  2852  2914 I PanelBar: INTENT_STATUSBAR_VISIBLE_CHANGE sended, EXTRA_VISIBLE = false
12-17 19:33:11.228  1795  2377 I IO.IOStatsService: saveIOStatsAndLatestUids,the time interval is too shorter than the last screen off
12-17 19:33:11.228  1795  1808 I ActivityManager_broadcast: dispatch ordered broadcast [background] BroadcastRecord{6c7cdff u-1 com.android.systemui.statusbar.visible.change}, has 1 receivers
12-17 19:33:11.229  2852  2852 I BadgedIconHelper: isCloneProcess = false
12-17 19:33:11.230  2852  2852 D HwCust  : Create obj success use class android.app.HwCustNotificationImpl
12-17 19:33:11.233  2852  2852 D HwCust  : Create obj success use class android.app.HwCustNotificationImpl
12-17 19:33:11.234  2852  2852 I StatusBarIconView: updateTint: tint=1
12-17 19:33:11.234  2883  2883 D HwKeyguardManagerImpl: isLockScreenDisabled HwKeyguardManagerImpl result = false
12-17 19:33:11.234  2852  2852 D HwCust  : Create obj success use class com.android.systemui.statusbar.HwCustExpandableNotificationRowImpl
12-17 19:33:11.235  1795 11747 D PowerManagerService: acquire lock=184063844, flags=0x1, tag="NetworkStats", name=android, ws=null, uid=1000, pid=1795
12-17 19:33:11.235  1795 11747 D PowerManagerService: ready=true,policy=0,wakefulness=0,wksummary=0x11,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=33,auto=-1,adj=0.0userId=0
12-17 19:33:11.235  1795 11747 D PowerManagerService: Acquiring suspend blocker "PowerManagerService.WakeLocks".
12-17 19:33:11.235 17709 17709 D HwIntelligent3_IntelligentReceiver: onReceive ,intent:Intent { act=com.android.systemui.statusbar.visible.change flg=0x10 cmp=com.huawei.intelligent/.main.receiver.IntelligentReceiver (has extras) }
12-17 19:33:11.238  1795  1806 I ActivityManager_service: retrieveServiceLocked, callerApp: ProcessRecord{7e9b22a 17709:com.huawei.intelligent/u0a17}, flags: 10000400
12-17 19:33:11.238  1795  1806 I ActivityManager_service: bindServiceLocked, r: ServiceRecord{61097cc u0 euid: 0 com.huawei.intelligent/.main.receiver.IntelligentIntentService}, euid: 0
12-17 19:33:11.239  1795 11747 D NetdConnector: SND -> {11627 bandwidth gettetherstats}
12-17 19:33:11.240  1795  2665 D NetdConnector: RCV <- {200 11627 Tethering stats list completed}
12-17 19:33:11.241  1795  2665 D NetdConnector: RCV <- {200 11627 Tethering stats list completed}
12-17 19:33:11.243  1795 11747 W NetworkStatsFactory: mStatsXtProcUid: /proc/net/comm/stats does not exist!
12-17 19:33:11.243  1795 11747 D HwNetworkStatsService: mActiveIface: null
12-17 19:33:11.243   606  2379 E libteec : QSEECom_send_cmd return!
12-17 19:33:11.243   606  2379 E libteec : qsc_send_cmd finish
12-17 19:33:11.243   606  2379 E libteec : send data return = 128
12-17 19:33:11.244   835  2385 E libteec : receive data len = 128
12-17 19:33:11.244   835  2385 E libteec : begin
12-17 19:33:11.244   835  2385 E libteec : qsc_decode end
12-17 19:33:11.244  2883  2883 I HwSystemManager: AntiMalManager:receive Broadcast ACTION_SCREEN_OFF mOnTimeSum:260909299 onTime:554237 isPowerConnected:false
12-17 19:33:11.245  1795 11747 I SendBroadcastPermission: action:com.android.server.action.NETWORK_STATS_UPDATED, mPermissionType:0
12-17 19:33:11.246  1795 11747 I HwActivityManagerService: Split enqueueing broadcast [callerApp]:ProcessRecord{34bf34f 0:system/1000}
12-17 19:33:11.247  1795 11747 D PowerManagerService: release:lock=184063844, flg=0x0, tag="NetworkStats", name=android", ws=null, uid=1000, pid=1795
12-17 19:33:11.247  1795 11747 D PowerManagerService: ready=true,policy=0,wakefulness=0,wksummary=0x10,uasummary=0x0,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=true,manual=33,auto=-1,adj=0.0userId=0
12-17 19:33:11.247  1795 11747 D PowerManagerService: Releasing suspend blocker "PowerManagerService.WakeLocks".
12-17 19:33:11.249  2883  2883 I HwSystemManager: AutoCleanReceiveServer:receive action:android.intent.action.SCREEN_OFF
12-17 19:33:11.251  2883  2883 I HwSystemManager: AutoCleanReceiveServer:telemamanger state isIdle:true
12-17 19:33:11.251  2883  2883 I HwSystemManager: AutoCleanReceiveServer:checkToStartCleanService,phone is use state,phone is use,need not start clean service
12-17 19:33:11.252 17709 20474 D IntelligentIntentService: eventAction :class com.huawei.intelligent.main.receiver.action.ActionBarPullDownAction
12-17 19:33:11.252 17709 20474 E HwIntelligent3_ActionBarPullDownAction: doAction not pull down return
12-17 19:33:11.253  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.253  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.257  2883  3040 I HwSystemManager: TrafficNotifyAfterLocked:mLockStartTraffic = 0;mLockStartTrafficList = {}
12-17 19:33:11.258  1795  3077 D GnssLocationProvider: receive broadcast intent, action: android.intent.action.SCREEN_OFF
12-17 19:33:11.258  1795  3077 I GnssLocationProvider: updateLowPowerMode,isPowerSaveMode:falseisInteractive:false
12-17 19:33:11.258  1795  3077 I GnssLocationProvider: disableGps:false  isEnabled()=true
12-17 19:33:11.261  2852  3361 I vol.VolumeDialogControl: C onScreenOff 
12-17 19:33:11.263  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.263  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.266  3168  3168 I CHR_TelStatusListenr0: [Timer rat:0 level:5] suspend
12-17 19:33:11.266  3168  3168 I CHR_TelStatusListenr0: [Timer serviceState:0 simReady:true] suspend
12-17 19:33:11.266  3168  3168 I CHR_TelStatusListenr1: [Timer serviceState:1 simReady:false] suspend
12-17 19:33:11.267  3168  3168 I CHR_TelphonyStatusService: duration: 590266 STATUS_REPORT_TIMESPAN: 86400000 / (1000 * 60 * 60 * 24) day STATUS_REPORT_TIMESPAN_FOR_BETA: 21600000 / (1000 * 60 * 60 * 24) day
12-17 19:33:11.267  3168  3168 I CHR_ChrUtil: is Beta User, userType = 3
12-17 19:33:11.270  2852  3556 I NetworkController.MobileSignalController(0): onDataActivity: direction=0
12-17 19:33:11.270  2852  3556 I SystemUIIdleHandler: enter addToIdleMessage(type:1001), mainloop is busy, add to idleMessage
12-17 19:33:11.271  2883  2996 E HwSystemManager: SimCardMethod:/getSimCardInfo: imsi is null
12-17 19:33:11.272  2852  3556 I NetworkController.MobileSignalController(0): onDataActivity: direction=0
12-17 19:33:11.272  2852  3556 I SystemUIIdleHandler: enter addToIdleMessage(type:1001), mainloop is busy, add to idleMessage
12-17 19:33:11.278  2883  2996 I HwSystemManager: NormalTrafficAnalysis:alert byte = 0 last alert byte = 0
12-17 19:33:11.278  2883  2996 E HwSystemManager: NormalTrafficAnalysis:alert byte = 0, so return
12-17 19:33:11.279  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.280  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.284  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.285  3218 13114 E HW-JPEG-DEC: [HME_JPEG_DEC_Delete](3298): HME_JPEG_DEC_Delete: decoder_ctx=null
12-17 19:33:11.285  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.291  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.291  2883  2996 I HwSystemManager: TafficState:default sub id = 0slotIndex = 0 subscriptionId = 0
12-17 19:33:11.292  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.297  2883  2996 E HwSystemManager: LeisureTrafficSetting:result is empty
12-17 19:33:11.301  2883  2996 I HwSystemManager: NatTrafficNotifyService:delta byte = 0 no traffic delta = 0Traffic state is 301
12-17 19:33:11.304  1795  1809 I HwPhoneWindowManager: OverscanTimeout run
12-17 19:33:11.304  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.305  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.306  2883  2996 I HwSystemManager: ExtraTrafficSetting:result is empty
12-17 19:33:11.321  3608  3608 D InCall  : InCallPresenter - notifyInCallScreenIsForeground: false
12-17 19:33:11.321  3608  3608 I SendBroadcastPermission: action:InCallScreenIsForegroundActivity, mPermissionType:0
12-17 19:33:11.321  1795 17832 I HwActivityManagerService: Split enqueueing broadcast [callerApp]:ProcessRecord{ec55919 3608:com.android.incallui/1001}
12-17 19:33:11.323  2883  2996 I HwSystemManager: ITrafficInfo:ITrafficInfo create 301updateBytes = 1769320345
12-17 19:33:11.327  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.327  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.335  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.336  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
12-17 19:33:11.346  2852  2852 W HwPhoneLayoutInflater: onCreateView : ClassNotFoundException, In this case we want to let the base class take a crack at it
